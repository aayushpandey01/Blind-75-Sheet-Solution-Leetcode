Climbing Stairs

class Solution {
public:
    int climbStairs(int n) {
        int dp[46];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i <= n; ++i){
            dp[i] = dp[i-1] + dp[i-2];
        }

        return dp[n];
        
    }
};

Coin Change

class Solution {
public:

    int coinChange(vector<int>& coins, int amount) {
        vector<int> dp(amount+1,amount+1);
        dp[0] = 0;
        for(int a{}; a<amount+1; a++){
            for(int c: coins){
                if(a-c >= 0){
                    dp[a] = min(dp[a], 1+dp[a-c]);
                }
            }
        }
        return dp[amount] == amount+1 ? -1 : dp[amount];
        
    }
};

Longest Increasing Subsequence

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<int>dp(n,1);
        int i = 1, j = 0;
        for(int i = 1; i < n; i++){
            while(j<i){
                if(nums[i] > nums[j]){
                    dp[i] = max(dp[i], dp[j]+1);
                }
                j++;
            }
            j = 0;
        }

        return *max_element(dp.begin(), dp.end());
        
    }
};

Longest Common Subsequence

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int dp[text1.size()+1][text2.size()+1];
        memset(dp,0,sizeof dp);
        for(int i = 1; i <= text1.size(); i++){
            for(int j = 1; j <= text2.size(); j++){
                if(text1[i-1] == text2[j-1])
                dp[i][j] = dp[i-1][j-1]+1;
                else
                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }

        return dp[text1.size()][text2.size()];
        
    }
};

Word Break 

class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        int maxLen = 0;
        unordered_set<string>words;
        for(const auto& word: wordDict){
            words.insert(word);
            maxLen = max(maxLen, (int) word.size());
        }
        vector<bool> validExcl(s.size() + 1, false);
        validExcl[0] = true;
        for(int i = 0; i <= s.size(); ++i){
            if(validExcl[i]){
                for(int j = 1; j <= maxLen && i + j <= s.size(); ++j){
                    if(words.count(s.substr(i, j))){
                        validExcl[i+j] = true;
                    }
                }
            }
        }

        return validExcl[s.size()];
        
    }
};

Combination Sum

class Solution {
public:
     void findCombination(int ind, int target, vector<int> &arr, vector<vector<int>> &ans, vector<int>&ds){
         if(ind == arr.size()){
             if(target == 0){
                 ans.push_back(ds);
             }
             return;
         }
         if(arr[ind] <= target){
             ds.push_back(arr[ind]);
             findCombination(ind, target - arr[ind], arr , ans, ds);
             ds.pop_back();
         }
         findCombination(ind+1, target, arr, ans, ds);
     }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int>ds;
        findCombination(0, target, candidates, ans, ds);
        return ans;
    }
};

House Robber

class Solution {
private:
    int n;
    vector<int> cache;
    const int INF = 987654321;
    int rob(vector<int>& nums, int index) {
        if (index == n) return 0;
        if (index > n) return -INF;
        
        int &ret = cache[index];
        if (ret != -1) return ret;
        
        int result = nums[index];
        result = max(result, nums[index] + rob(nums, index + 2));
        result = max(result, nums[index] + rob(nums, index + 3));
        return ret = result;
    }
    
public:
    int rob(vector<int>& nums) {
        n = nums.size();
        cache = vector<int>(n, -1);
        return max(rob(nums, 0), rob(nums, 1));
    }
};







