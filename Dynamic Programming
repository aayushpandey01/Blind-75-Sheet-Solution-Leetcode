Climbing Stairs

class Solution {
public:
    int climbStairs(int n) {
        int dp[46];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i <= n; ++i){
            dp[i] = dp[i-1] + dp[i-2];
        }

        return dp[n];
        
    }
};

Coin Change

class Solution {
public:

    int coinChange(vector<int>& coins, int amount) {
        vector<int> dp(amount+1,amount+1);
        dp[0] = 0;
        for(int a{}; a<amount+1; a++){
            for(int c: coins){
                if(a-c >= 0){
                    dp[a] = min(dp[a], 1+dp[a-c]);
                }
            }
        }
        return dp[amount] == amount+1 ? -1 : dp[amount];
        
    }
};

Longest Increasing Subsequence

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<int>dp(n,1);
        int i = 1, j = 0;
        for(int i = 1; i < n; i++){
            while(j<i){
                if(nums[i] > nums[j]){
                    dp[i] = max(dp[i], dp[j]+1);
                }
                j++;
            }
            j = 0;
        }

        return *max_element(dp.begin(), dp.end());
        
    }
};

Longest Common Subsequence

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int dp[text1.size()+1][text2.size()+1];
        memset(dp,0,sizeof dp);
        for(int i = 1; i <= text1.size(); i++){
            for(int j = 1; j <= text2.size(); j++){
                if(text1[i-1] == text2[j-1])
                dp[i][j] = dp[i-1][j-1]+1;
                else
                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }

        return dp[text1.size()][text2.size()];
        
    }
};




